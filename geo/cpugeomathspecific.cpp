#ifdef G_ASSERT_SHEME
  #include <assert.h>
#endif

#include "cpumath.h"
#include "cpumatrix.h"
#include "cpugeomath.h"
#include "cpugeomathspecific.h"

namespace RMath {



namespace RGeoMath {



//------------------------------------------------------------------------------
//Пересчет СТСК <=> МПСК                                                       |
//вх.данные:  [iX,iY,iZ] - координаты вектора положения в Стартовой СК         |
//            [iVX,iVY,iVZ] - координаты вектора скорости в Стартовой СК       |
//вых.данные: [oX,oY,oZ,oVX,oVY,oVZ] МПСК координаты [м] и их производные[м/с] |
bool stskmpskInternal(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ,
               size_t ichannel_number, T *TR, T *SH, bool two)
{
  if ( RCore::isNan(iX) || RCore::isNan(iY) || RCore::isNan(iZ) )
  {
    return false;
  }

  static const size_t first_channel_index = 1;
#ifdef G_ASSERT_SHEME
  assert(ichannel_number>=first_channel_index);
#else
  if (ichannel_number<first_channel_index) return false;
#endif

  ruint32 sft = ichannel_number - first_channel_index,
          id1 = sft*3,
          id2 = sft*9;

  return (two) ?pgsk2mpsk(iX, iY, iZ, iVX, iVY, iVZ,
                          SH[id1],   SH[id1+1], SH[id1+2],
                          TR[id2],   TR[id2+1], TR[id2+2],
                          TR[id2+3], TR[id2+4], TR[id2+5],
                          TR[id2+6], TR[id2+7], TR[id2+8],
                          oX, oY, oZ, oVX, oVY, oVZ)
               :mpsk2pgsk(iX, iY, iZ, iVX, iVY, iVZ,
                          SH[id1],   SH[id1+1], SH[id1+2],
                          TR[id2],   TR[id2+1], TR[id2+2],
                          TR[id2+3], TR[id2+4], TR[id2+5],
                          TR[id2+6], TR[id2+7], TR[id2+8],
                          oX, oY, oZ, oVX, oVY, oVZ);
}


//------------------------------------------------------------------------------
//Пересчет АПСК <=> МПСК                                                       |
//вх.данные:  [iX,iY,iZ] - координаты вектора положения в Стартовой СК         |
//            [iVX,iVY,iVZ] - координаты вектора скорости в Стартовой СК       |
//вых.данные: [oX,oY,oZ,oVX,oVY,oVZ] МПСК координаты [м] и их производные[м/с] |
bool apskmpskInternal(const T &iX,  const T &iY,  const T &iZ,
                      const T &iVX, const T &iVY, const T &iVZ,
                      T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ,
                      size_t nEdge, T *TR, T *SH, bool two, ruint32 edge_count)
{
  if ( RCore::isNan(iX) || RCore::isNan(iY) || RCore::isNan(iZ) )
  {
    return false;
  }

  static const size_t first_edge_index = 0;
#ifdef G_ASSERT_SHEME
  assert(nEdge<edge_count);
#else
  if (nEdge >= edge_count) return false;
#endif

  ruint32 sft = nEdge - first_edge_index,
          id1 = sft*3,
          id2 = sft*9;

  return (two) ?mpsk2pgsk(iX, iY, iZ, iVX, iVY, iVZ,
                          SH[id1],   SH[id1+1], SH[id1+2],
                          TR[id2],   TR[id2+3], TR[id2+6],
                          TR[id2+1], TR[id2+4], TR[id2+7],
                          TR[id2+2], TR[id2+5], TR[id2+8],
                          oX, oY, oZ, oVX, oVY, oVZ)
               :pgsk2mpsk(iX, iY, iZ, iVX, iVY, iVZ,
                          SH[id1],   SH[id1+1], SH[id1+2],
                          TR[id2],   TR[id2+3], TR[id2+6],
                          TR[id2+1], TR[id2+4], TR[id2+7],
                          TR[id2+2], TR[id2+5], TR[id2+8],
                          oX, oY, oZ, oVX, oVY, oVZ);
}



//полигонные пересчёты
namespace GIP10 {


//------------------------------------------------------------------------------
//МАТРИЦЫ ПЕРЕХОДА ДЛЯ СТАРТОВЫХ СК В/ИЗ МПСК МРЛС                             |
T TRANSFORM[2*9] =
{
    /*! KAHAЛ   1 */
    +0.00959986246155861,  +0.999924078689538   ,  +0.007725250649497277,
    -0.963084815198622  ,  +0.01132412379226975 ,  -0.2689598537963855  ,
    -0.2690269157065048 ,  -0.004858093990007881,  +0.9631204065682697  ,
    /*! KAHAЛ   2 */
    +0.009609266942885714, +0.9999239681472102  ,  +0.007727866041625995,
    -0.4909881896706616  , +0.01145058153223605 ,  -0.8710909721645035  ,
    -0.8711132300641211  , +0.00457625472527123 ,  +0.4910608906234976
};




//------------------------------------------------------------------------------
// Вектора сдвига из СТСК в МПК (начало МПК в СТСК)                            |
T  SHIFT[2*3] =
{
    /*! KAHAЛ   1 */
    -593.808284358, +72316.913354107, -30890.012651561,
    /*! KAHAЛ   2 */
    -594.514219535, +73029.574395782, +29319.380473931
};








//------------------------------------------------------------------------------
//Пересчет из Стартовой СК в МПСК                                              |
//вх.данные:  [iX,iY,iZ] - координаты вектора положения в Стартовой СК         |
//            [iVX,iVY,iVZ] - координаты вектора скорости в Стартовой СК       |
//вых.данные: [oX,oY,oZ,oVX,oVY,oVZ] МПСК координаты [м] и их производные[м/с] |
bool stsk2mpsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ,
               size_t ichannel_number)
{
  return stskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, ichannel_number,
                          TRANSFORM, SHIFT, true);
}


//------------------------------------------------------------------------------
//Пересчет из МПСК в Стартовую СК                                              |
//вх.данные:  [iX,iY,iZ] - координаты вектора положения в МПСК                 |
//            [iVX,iVY,iVZ] - координаты вектора скорости в МПСК                |
//вых.данные: [oX,oY,oZ,oVX,oVY,oVZ] координаты [м] и их производные[м/с]      |
//                                   в Стартовой СК                            |
bool mpsk2stsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ,
               size_t ichannel_number)
{
  return stskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, ichannel_number,
                          TRANSFORM, SHIFT, false);
}






//ПАРАМЕТРЫ ГРАНИ РЛС НА ПОЛИГОНЕ
const T a = _MDEG2RAD(300.0 + 8.0/60.0 + 13.0/3600.0),
//Углы между горизонтальной плоскостью и антеннами граней
        e = _MDEG2RAD(90.0 - (30.0 + 2.0/60.0 + 38.0/3600.0)),
//Угол разворота грани МРЛС (по часовой стрелке, если смотреть на МРЛС)
        b = _MDEG2RAD(0.0 + 5.0/60.0 + 13.0/3600.0),
//Полурасстояние между гранями
        ac = 0.0,
//Сдвиг между ПРД и ПРМ
        bc = 0.0,
//Полувысота центра грани
        hc = - 0.0; // Со знаком "-" для корректности вычисления "constrls_DASPKMPSK[(gr * 3) + CRD_DY] = - hc;"
const T ca = RCore::_cos(a),
        sa = RCore::_sin(a),
        ce = RCore::_cos(e),
        se = RCore::_sin(e),
        cb = RCore::_cos(b),
        sb = RCore::_sin(b);

T	MRLSSHIFT[3]     = { -ac*sa - bc*ca,     -hc,    ac*ca - bc*sa };
T	MRLSTRANSFORM[9] = { -se*sa,              ce,    se*ca,
                              cb*ce*sa - sb*ca,   cb*se, -cb*ce*ca - sb*sa,
                             -sb*ce*sa - cb*ca,  -sb*se,  sb*ce*ca - cb*sa };

//------------------------------------------------------------------------------
//Пересчет из АПСК в МПСК                                                      |
bool apsk2mpsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ, ruint32 nEdge)
{
  return apskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, nEdge,
                          MRLSTRANSFORM, MRLSSHIFT, true, 1);
}


//------------------------------------------------------------------------------
//Пересчет из МПСК в АПСК                                                      |
bool mpsk2apsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ, ruint32 nEdge)
{
  return apskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, nEdge,
                          MRLSTRANSFORM, MRLSSHIFT, false, 1);
}





}






//полигонные пересчёты
namespace SOFRINO {


//------------------------------------------------------------------------------
//МАТРИЦЫ ПЕРЕХОДА ДЛЯ СТАРТОВЫХ СК В/ИЗ МПСК МРЛС                             |
T TRANSFORM[68*9] = {

  //  KAHAЛ   01    CП N 1
  -1.1936823578488760E-003,  +9.9998586254757629E-001,  -5.1816819092231972E-003,
  +8.4897962537179890E-001,  +3.7515293118604247E-003,  +5.2841226493277201E-001,
  +5.2842423376108365E-001,  -3.7683859677669151E-003,  -8.4897210109709102E-001,
  //  KAHAЛ   02
  -1.1893462656112060E-003,  +9.9998590156712160E-001,  -5.1751446792570356E-003,
  +8.4897626157968061E-001,  +3.7444176878293659E-003,  +5.2841771981110587E-001,
  +5.2842964785262557E-001,  -3.7651033411894837E-003,  -8.4896874575403529E-001,
  //  KAHAЛ   03
  -1.1843828284280160E-003,  +9.9998594677502779E-001,  -5.1675419463053582E-003,
  +8.4897241117425302E-001,  +3.7362138510638762E-003,  +5.2842396403932505E-001,
  +5.2843584502027345E-001,  -3.7612442768609283E-003,  -8.4896490548149219E-001,
  //  KAHAЛ   04
  -1.1800469158413629E-003,  +9.9998598566190679E-001,  -5.1610046561518155E-003,
  +8.4896904720922577E-001,  +3.7291022576940158E-003,  +5.2842941882242948E-001,
  +5.2844125914801091E-001,  -3.7579616996543330E-003,  -8.4896154998558583E-001,
  //  KAHAЛ   05
  -1.1987041836890160E-003,  +9.9998596264277559E-001,  -5.1611651476152548E-003,
  +8.4898357748681950E-001,  +3.7449231700588547E-003,  +5.2840596202932034E-001,
  +5.2841787277301770E-001,  -3.7483420136519315E-003,  -8.4897614905613651E-001,
  //  KAHAЛ   06
  -1.2035339812221370E-003,  +9.9998598889612940E-001,  -5.1549507646424762E-003,
  +8.4898735142082947E-001,  +3.7457130403085168E-003,  +5.2839989284751400E-001,
  +5.2841179834803138E-001,  -3.7405407696624880E-003,  -8.4897996426379203E-001,
  //  KAHAЛ   07
  -1.2083910626336650E-003,  +9.9998601455575209E-001,  -5.1488332603214408E-003,
  +8.4899114644423286E-001,  +3.7465772273177505E-003,  +5.2839378915576453E-001,
  +5.2840568983532578E-001,  -3.7328075201635443E-003,  -8.4898380025632446E-001,
  //  KAHAЛ   08
  -1.2132752511530980E-003,  +9.9998604012190619E-001,  -5.1427156711278243E-003,
  +8.4899496261430694E-001,  +3.7474643450215255E-003,  +5.2838765122447169E-001,
  +5.2839954714088848E-001,  -3.7250600386996171E-003,  -8.4898765745387121E-001,
  //  KAHAЛ   09
  -1.2181322442173520E-003,  +9.9998606541079900E-001,  -5.1366465777473082E-003,
  +8.4899875754167332E-001,  +3.7483542603507836E-003,  +5.2838154730557484E-001,
  +5.2839343849685534E-001,  -3.7173679624157680E-003,  -8.4899149308394221E-001,
  //  KAHAЛ   10
  -1.2230432736812110E-003,  +9.9998609132008509E-001,  -5.1304319047306146E-003,
  +8.4900259488549613E-001,  +3.7492129430032022E-003,  +5.2837537535354716E-001,
  +5.2838726143127691E-001,  -3.7095240511947203E-003,  -8.4899537182982844E-001,
  //  KAHAЛ   11
  -1.2279543024938540E-003,  +9.9998611691837980E-001,  -5.1242656772514184E-003,
  +8.4900643216612921E-001,  +3.7500973371036306E-003,  +5.2836920321920902E-001,
  +5.2838108432150603E-001,  -3.7017212837163072E-003,  -8.4899925028869548E-001,
  //  KAHAЛ   12
  -1.2328110305779180E-003,  +9.9998614202486749E-001,  -5.1181964776848424E-003,
  +8.4901022699444358E-001,  +3.7509873070560377E-003,  +5.2836309915915346E-001,
  +5.2837497540648719E-001,  -3.6940292965276312E-003,  -8.4900308569035844E-001,
  //  KAHAЛ   13    CП N 2
  -4.4163100880503628E-006,  +9.9994609116417769E-001,  -1.0383387981674870E-002,
  +6.1565639684301708E-001,  -8.1795438038470428E-003,  -7.8797226860431711E-001,
  -7.8801472131348498E-001,  -6.3960791616999779E-003,  -6.1562317139999498E-001,
  //  KAHAЛ   14
  -8.8289486588252599E-006,  +9.9994602315515339E-001,  -1.0389932542743389E-002,
  +6.1565132271356564E-001,  -8.1820257253128739E-003,  -7.8797620731597422E-001,
  -7.8801868554183828E-001,  -6.4035327143234380E-003,  -6.1561801955895497E-001,
  //  KAHAЛ   15
  -1.3132041216908630E-005,  +9.9994595609359099E-001,  -1.0396380121151270E-002,
  +6.1564637465514922E-001,  -8.1844977310990526E-003,  -7.8798004757154917E-001,
  -7.8802255120111932E-001,  -6.4108415175864577E-003,  -6.1561299524093487E-001,
  //  KAHAЛ   16
  -1.7517439354121910E-005,  +9.9994588796212269E-001,  -1.0402924626331610E-002,
  +6.1564133205779405E-001,  -8.1869963120956993E-003,  -7.8798396135549002E-001,
  -7.8802649064307727E-001,  -6.4182738355066807E-003,  -6.1560787503550361E-001,
  //  KAHAЛ   17
  -2.1848097583575797E-005,  +9.9994582077938879E-001,  -1.0409372147013729E-002,
  +6.1563635250544547E-001,  -8.1894517459956953E-003,  -7.8798782627264656E-001,
  -7.8803038075727207E-001,  -6.4256039353823716E-003,  -6.1560281888374600E-001,
  //  KAHAЛ   18
  -2.6233658396037357E-005,  +9.9994575252524640E-001,  -1.0415916594979599E-002,
  +6.1563130992856734E-001,  -8.1919503716951459E-003,  -7.8799173992164652E-001,
  -7.8803432003145095E-001,  -6.4330362835979945E-003,  -6.1559769857979695E-001,
  //  KAHAЛ   19
  -3.0537073848984358E-005,  +9.9994568522238159E-001,  -1.0422364061411450E-002,
  +6.1562636190704488E-001,  -8.1944224632141413E-003,  -7.8799557991500845E-001,
  -7.8803818536450586E-001,  -6.4403451488139985E-003,  -6.1559267406441799E-001,
  //  KAHAЛ   20
  -3.5005029187939200E-005,  +9.9994561633725709E-001,  -1.0428956925345049E-002,
  +6.1562122479761998E-001,  -8.1969094848284045E-003,  -7.8799956741966272E-001,
  -7.8804219833288487E-001,  -6.4478711836001559E-003,  -6.1558745812749767E-001,
  //  KAHAЛ   21
  -2.1959482450017159E-005,  +9.9994552564962909E-001,  -1.0437684181270530E-002,
  +6.1563622595647612E-001,  -8.2116949589755772E-003,  -7.8798769365769107E-001,
  -7.8803047961855348E-001,  -6.4431202990127149E-003,  -6.1560250924843114E-001,
  //  KAHAЛ   22
  -1.7656049418187368E-005,  +9.9994559352065389E-001,  -1.0431188182133110E-002,
  +6.1564117389881200E-001,  -8.2091847082135681E-003,  -7.8798385407755585E-001,
  -7.8802661420078730E-001,  -6.4357816194761620E-003,  -6.1560753408822873E-001,
  //  KAHAЛ   23
  -1.3243064928188650E-005,  +9.9994566183805160E-001,  -1.0424643681283399E-002,
  +6.1564624790967003E-001,  -8.2067027425483776E-003,  -7.8797991564813395E-001,
  -7.8802265021975500E-001,  -6.4283280373624027E-003,  -6.1561268614225097E-001,
  //  KAHAЛ   24
  -8.9123905573826168E-006,  +9.9994572908255799E-001,  -1.0418196106837989E-002,
  +6.1565122738252610E-001,  -8.2042473519988871E-003,  -7.8797605074505662E-001,
  -7.8801876001968259E-001,  -6.4209979706007789E-003,  -6.1561774230613524E-001,
  //  KAHAЛ   25
  -4.5269769487673979E-006,  +9.9994579778159229E-001,  -1.0411603067794199E-002,
  +6.1565626989816159E-001,  -8.2017106119896517E-003,  -7.8797213737423415E-001,
  -7.8801482049171410E-001,  -6.4135358400806289E-003,  -6.1562286283360158E-001,
  //  KAHAЛ   26
  -1.9646421233391940E-007,  +9.9994586490484350E-001,  -1.0405155436888080E-002,
  +6.1566124939028948E-001,  -8.1992552650808981E-003,  -7.8796827233860482E-001,
  -7.8801093012670136E-001,  -6.4062058039406405E-003,  -6.1562791889910938E-001,
  //  KAHAЛ   27
  -4.1887840032903279E-006,  +9.9994593297611049E-001,  -1.0398610820185919E-002,
  +6.1566629192434232E-001,  -8.1967567709199255E-003,  -7.8796435843670530E-001,
  -7.8800699043256235E-001,  -6.3987735523284373E-003,  -6.1563303901467258E-001,
  //  KAHAЛ   28
  +8.5191335616555239E-006,  +9.9994599997842039E-001,  -1.0392163132906859E-002,
  +6.1567127143344923E-001,  -8.1943014665996116E-003,  -7.8796049327043946E-001,
  -7.8800309990440021E-001,  -6.3914435482970997E-003,  -6.1563809497985462E-001,
  //  KAHAЛ   29    CП N 3
  +3.7614843209801859E-003,  +9.9994760447539119E-001,  -9.5204800104573958E-003,
  -9.9185395013539292E-001,  +2.5184904662982152E-003,  -1.2735540352332249E-001,
  -1.2732475343200218E-001,  +9.9219710591023193E-003,  +9.9181145468974191E-001,
  //  KAHAЛ   30
  +3.7539962499208350E-003,  +9.9994761191102520E-001,  -9.5226543354801430E-003,
  -9.9185537508257905E-001,  +2.5108956691751162E-003,  -1.2734445540632887E-001,
  -1.2731387368213860E-001,  +9.9231464957429830E-003,  +9.9181283956786538E-001,
  //  KAHAЛ   31
  +3.7464807581641190E-003,  +9.9994761938795020E-001,  -9.5248287280925463E-003,
  -9.9185680504714473E-001,  +2.5032740903864880E-003,  -1.2733346732300339E-001,
  -1.2730295426108022E-001,  +9.9243185760630711E-003,  +9.9181422944884275E-001,
  //  KAHAЛ   32
  +3.7389654829292719E-003,  +9.9994762634175709E-001,  -9.5270515167525356E-003,
  -9.9185823485374144E-001,  +2.4956465919664329E-003,  -1.2732247916573076E-001,
  -1.2729203466807106E-001,  +9.9255388555684722E-003,  +9.9181561874598896E-001,
  //  KAHAЛ   33
  +3.7314498972339630E-003,  +9.9994763369808699E-001,  -9.5292257429793817E-003,
  -9.9185966445746411E-001,  +2.4880249937657459E-003,  -1.2731149105228749E-001,
  -1.2728111526849027E-001,  +9.9267110981746979E-003,  +9.9181700837542723E-001,
  //  KAHAЛ   34
  +3.7239342632945359E-003,  +9.9994764099417439E-001,  -9.5313998860795121E-003,
  -9.9186109388108044E-001,  +2.4804033843435571E-003,  -1.2730050292154095E-001,
  -1.2727019587723191E-001,  +9.9278834217889867E-003,  +9.9181839787943747E-001,
  //  KAHAЛ   35
  +3.7164459534723150E-003,  +9.9994764812970509E-001,  -9.5335737971802108E-003,
  -9.9186251793110945E-001,  +2.4728085337655486E-003,  -1.2728955472195948E-001,
  -1.2725931617305782E-001,  +9.9290592619189445E-003,  +9.9181978213248938E-001,
  //  KAHAЛ   36
  +3.7126062634372260E-003,  +9.9994757895659439E-001,  -9.5423211839667068E-003,
  -9.9186325936432394E-001,  +2.4679435367038962E-003,  -1.2728387163297371E-001,
  -1.2725364936972293E-001,  +9.9372326904895733E-003,  +9.9182042735998448E-001,
  //  KAHAЛ   37
  +3.7141257146799410E-003,  +9.9994750026605679E-001,  -9.5499728711558093E-003,
  -9.9186298245017891E-001,  +2.4684553682182364E-003,  -1.2728601955097336E-001,
  -1.2725576338701207E-001,  +9.9450208526364178E-003,  +9.9182007806105089E-001,
  //  KAHAЛ   38
  +3.7156451990928440E-003,  +9.9994742151456729E-001,  -9.5576245543760431E-003,
  -9.9186270553197640E-001,  +2.4689671997117134E-003,  -1.2728816746168682E-001,
  -1.2725787738109627E-001,  +9.9528090172926109E-003,  +9.9181972869928485E-001,
  //  KAHAЛ   39
  +3.7171652406098200E-003,  +9.9994734177269069E-001,  -9.5653731920633594E-003,
  -9.9186242865420139E-001,  +2.4694672119456400E-003,  -1.2729031524777611E-001,
  -1.2725999098995371E-001,  +9.9606934205690488E-003,  +9.9181937835465693E-001,
  //  KAHAЛ   40
  +3.7186850533306730E-003,  +9.9994726243346219E-001,  -9.5730733465640002E-003,
  -9.9186215175021149E-001,  +2.4699731334761397E-003,  -1.2729246308466151E-001,
  -1.2726210475594900E-001,  +9.9685297082601635E-003,  +9.9181902840616103E-001,
  //  KAHAЛ   41    CП N 4
  +4.5397790501080547E-003,  +9.9997842903095920E-001,  -4.7467756373188088E-003,
  -9.9996721392018199E-001,  +4.5077964767706478E-003,  -6.7268756219129909E-003,
  -6.7053330181932594E-003,  +4.7771585381749379E-003,  +9.9996610805837609E-001,
  //  KAHAЛ   42
  +4.5403789337295402E-003,  +9.9997846357848039E-001,  -4.7389174248540882E-003,
  -9.9996720449389558E-001,  +4.5084444351509044E-003,  -6.7278425545327066E-003,
  -6.7063325149868116E-003,  +4.7693089642628075E-003,  +9.9996613882481118E-001,
  //  KAHAЛ   43
  +4.5409519461611682E-003,  +9.9997849795568379E-001,  -4.7311078741545023E-003,
  -9.9996719545898059E-001,  +4.5090654034457443E-003,  -6.7287692105007573E-003,
  -6.7072916533716656E-003,  +4.7615076899738670E-003,  +9.9996616956934829E-001,
  //  KAHAЛ   44
  +4.5415252685637774E-003,  +9.9997853204116920E-001,  -4.7233468031630515E-003,
  -9.9996718642282918E-001,  +4.5096863711820605E-003,  -6.7296958656353498E-003,
  -6.7082505800969408E-003,  +4.7537548970817524E-003,  +9.9996620002304719E-001,
  //  KAHAЛ   45
  +4.5422231358624894E-003,  +9.9997857350489419E-001,  -4.7138880025608407E-003,
  -9.9996717542061737E-001,  +4.5104423319210834E-003,  -6.7308239675629841E-003,
  -6.7094180296015096E-003,  +4.7443061755187968E-003,  +9.9996623706434039E-001,
  //  KAHAЛ   46
  +4.5343918583402093E-003,  +9.9997861154168989E-001,  -4.7133586357150162E-003,
  -9.9996728845480519E-001,  +4.5026697189587744E-003,  -6.7192250852302913E-003,
  -6.6978586741610465E-003,  +4.7436720539918006E-003,  +9.9996631756505917E-001,
  //  KAHAЛ   47
  +4.5266143061134462E-003,  +9.9997864973278119E-001,  -4.7127318539203203E-003,
  -9.9996740051104317E-001,  +4.4949510859122804E-003,  -6.7077067558203871E-003,
  -6.6863800453243324E-003,  +4.7429414226324148E-003,  +9.9996639784972317E-001,
  //  KAHAЛ   48
  +4.5188102335203652E-003,  +9.9997868752549360E-001,  -4.7122021247607733E-003,
  -9.999675127658738E-001,   +4.4872054598082490E-003,  -6.6961481453235898E-003,
  -6.674860814734939E-003,   +4.7423076611114003E-003,  +9.9996647781370700E-001,
  //  KAHAЛ   49
  +4.510978672900513E-003,  +9.9997872560902089E-001,  -4.7116240056806454E-003,
  -9.999676252172139E-001,  +4.4794328453872613E-003,  -6.6845492608141226E-003,
  -6.663301647773416E-003,  +4.7416253270303995E-003,  +9.9996655814102538E-001,
  //  KAHAЛ   50
  +4.503201483304752E-003,  +9.9997876338815979E-001,  -4.7110454346256684E-003,
  -9.999677366947058E-001,  +4.4717142073301503E-003,  -6.6730309239270069E-003,
  -6.651822762558013E-003,  +4.7409434434833439E-003,  +9.9996663779808219E-001,
  //  KAHAЛ   51
  +4.495451484413528E-003,  +9.9997880098551080E-001,  -4.7104665937821788E-003,
  -9.999678475911858E-001,  +4.4640225554984604E-003,  -6.6615528579313859E-003,
  -6.640384010454213E-003,  +4.7402618286182243E-003,  +9.9996671705511760E-001,
  //  KAHAЛ   52
  +4.487647143081730E-003,  +9.9997883876506249E-001,  -4.7098880237090692E-003,
  -9.9996795907294568E-001,  +4.4562769267846277E-003,  -6.6499942435400356E-003,
  -6.6288649561217208E-003,  +4.7395799421990044E-003,  +9.9996679671445320E-001,
  //  KAHAЛ   53
  +4.4868004786741628E-003,  +9.9997878720765400E-001,  -4.7216264330927080E-003,
  -9.9996797227218730E-001,  +4.4553589665731709E-003,  -6.6486243937176797E-003,
  -6.6274468171635256E-003,  +4.7513062612387488E-003,  +9.9996675046598278E-001,
  //  KAHAЛ   54
  +4.4861996728246057E-003,  +9.9997875299753310E-001,  -4.7294361179830652E-003,
  -9.9996798158744428E-001,  +4.4547110097807813E-003,  -6.6476574634674835E-003,
  -6.6264479495281017E-003,  +4.7591074076839537E-003,  +9.9996671998834748E-001,
  //  KAHAЛ   55
  +4.4856532104752206E-003,  +9.9997871848399529E-001,  -4.7372454424128296E-003,
  -9.9996799012552358E-001,  +4.4541170296304384E-003,  -6.6467710812547097E-003,
  -6.6255293822909513E-003,  +4.7669089138207962E-003,  +9.9996668891509148E-001,
  //  KAHAЛ   56
  +4.4850795540287364E-003,  +9.9997868403029160E-001,  -4.7450549459300204E-003,
  -9.9996799905032970E-001,  +4.4534960608540947E-003,  -6.6458444245681503E-003,
  -6.6245706784394528E-003,  +4.7747102406134048E-003,  +9.9996665804687919E-001,
  //  KAHAЛ   57    CП N 5
  -1.4650727456693420E-004,  +9.9999998232628569E-001,  +1.1782634009736240E-004,
  -9.9999996535624359E-001,  -1.4653303690061690E-004,  +2.1866773986117440E-004,
  +2.1868500144797680E-004,  -1.1779429960080680E-004,  +9.9999996915068599E-001,
  //  KAHAЛ   58
  -1.4661325122296830E-004,  +9.9999998135448599E-001,  +1.2568047592623640E-004,
  -9.9999996530529257E-001,  -1.4664075133788930E-004,  +2.1882847951010610E-004,
  +2.1884690530936389E-004,  -1.2564838841093430E-004,  +9.9999996815925658E-001,
  //  KAHAЛ   59
  -1.4671922656896690E-004,  +9.9999998032098759E-001,  +1.3353461169934940E-004,
  -9.9999996525430350E-001,  -1.4674846699955730E-004,  +2.1898922098613169E-004,
  +2.1900881267622460E-004,  -1.3350247713046770E-004,  +9.9999996710611359E-001,
  //  KAHAЛ   60
  -1.4682520996247270E-004,  +9.9999997923264319E-001,  +1.4134026540787720E-004,
  -9.9999996520327709E-001,  -1.4685618261709399E-004,  +2.1914996239633399E-004,
  +2.1917071453703140E-004,  -1.4130808375042990E-004,  +9.9999996599811099E-001,
  //  KAHAЛ   61
  -1.4693117592569900E-004,  +9.9999997807612970E-001,  +1.4919440142317150E-004,
  -9.9999996515221519E-001,  -1.4696389395572010E-004,  +2.1931069742122829E-004,
  +2.1933261880330290E-004,  -1.4916217264542000E-004,  +9.9999996482192348E-001,
  //  KAHAЛ   62
  -1.4706413682446230E-004,  +9.9999997686155959E-001,  +1.5700006192494490E-004,
  -9.9999996508830409E-001,  -1.4709859844646249E-004,  +2.1951171367415530E-004,
  +2.1953480308406490E-004,  -1.5696777414310459E-004,  +9.9999996358279318E-001,
  //  KAHAЛ   63
  -1.6263361292848670E-004,  +9.9999997465466729E-001,  +1.5569512632038480E-004,
  -9.9999995730507017E-001,  -1.6267140519882730E-004,  +2.4275063654194520E-004,
  +2.4277595753434409E-004,  -1.5565564025991900E-004,  +9.9999995841557708E-001,
  //  KAHAЛ   64
  -1.7043185661260470E-004,  +9.9999997345359740E-001,  +1.5506703921714730E-004,
  -9.9999995311257149E-001,  -1.7047130068695820E-004,  +2.5439023192815150E-004,
  +2.5441665965489341E-004,  -1.5502367574690700E-004,  +9.9999995561991049E-001,
  //  KAHAЛ   65
  -1.7820313011394110E-004,  +9.9999997219611389E-001,  +1.5443903496270800E-004,
  -9.9999994873928010E-001,  -1.7824420510428010E-004,  +2.6598954919222854E-004,
  +2.6601706965971578E-004,  -1.5439162687580490E-004,  +9.9999995269907078E-001,
  //  KAHAЛ   66
  -1.8600141554874530E-004,  +9.9999997088026039E-001,  +1.5376264705948580E-004,
  -9.9999994415482428E-001,  -1.8604409957095029E-004,  +2.7762914305413938E-004,
  +2.7765774160287687E-004,  -1.5371099905898960E-004,  +9.9999994963955229E-001,
  //  KAHAЛ   67
  -1.9379970398985300E-004,  +9.9999996949569839E-001,  +1.5313483193313380E-004,
  -9.9999993937404920E-001,  -1.9384399527334040E-004,  +2.8926873876010390E-004,
  +2.8929841420381736E-004,  -1.5307876245322640E-004,  +9.9999994643665847E-001,
  //  KAHAЛ   68
  -2.0159801977111870E-004,  +9.9999996805730239E-001,  +1.5245862560151660E-004,
  -9.9999993439695679E-001,  -2.0164388905738999E-004,  +3.0090833160337113E-004,
  +3.0093906434174028E-004,  -1.5239795307597780E-004,  +9.9999994310526998E-001
};




//------------------------------------------------------------------------------
// Вектора сдвига из СТСК в МПК (начало МПК в СТСК)                            |
T  SHIFT[68*3] = {
  //  KAHAЛ   01    CП N 1
  +16.879261, +23947.250278, -24032.794884,
   //  KAHAЛ   02
  +17.527661, +23901.831543, -24011.884073,
   //  KAHAЛ   03
  +18.515463, +23849.437781, -23987.300309,
   //  KAHAЛ   04
  +19.163016, +23804.019239, -23966.389808,
   //  KAHAЛ   05
  +19.018209, +23905.164061, -23904.887019,
   //  KAHAЛ   06
  +19.086173, +23910.258686, -23855.083867,
   //  KAHAЛ   07
  +18.950352, +23915.827732, -23805.714293,
   //  KAHAЛ   08
  +19.113937, +23921.543377, -23756.253731,
   //  KAHAЛ   09
  +19.275750, +23927.276557, -23707.146822,
  //  KAHAЛ   10
  +19.541526, +23932.811109, -23657.070882,
  //  KAHAЛ   11
  +19.705318, +23938.509688, -23607.257419,
  //  KAHAЛ   12
  +20.065967, +23944.243213, -23558.151074,
  //  KAHAЛ   13    CП N 2
  -264.542818, -52181.883248, -40804.240582,
  //  KAHAЛ   14
  -265.476077, -52197.678745, -40851.836429,
  //  KAHAЛ   15
  -266.503306, -52213.411913, -40898.507695,
  //  KAHAЛ   16
  -267.237350, -52229.313914, -40945.967781,
  //  KAHAЛ   17
  -266.765349, -52244.941130, -40992.775198,
  //  KAHAЛ   18
  -266.300175, -52260.843413, -41040.235474,
  //  KAHAЛ   19
  -266.028945, -52276.577121, -41086.907131,
  //  KAHAЛ   20
  -265.967786, -52292.404679, -41134.965944,
  //  KAHAЛ   21
  -266.147897, -52386.835222, -41104.517664,
  //  KAHAЛ   22
  -266.615504, -52370.858092, -41057.655819,
  //  KAHAЛ   23
  -266.980278, -52355.062325, -41010.059793,
  //  KAHAЛ   24
  -267.251886, -52339.435390, -40963.252592,
  //  KAHAЛ   25
  -267.114222, -52323.289969, -40915.602328,
  //  KAHAЛ   26
  -266.486603, -52307.663309, -40868.795319,
  //  KAHAЛ   27
  -265.352944, -52291.761864, -40821.335658,
  //  KAHAЛ   28
  -264.426097, -52276.135472, -40774.528851,
  //  KAHAЛ   29    CП N 3
  -250.665233, +16117.013534, +63304.387180,
  //  KAHAЛ   30
  -250.816455, +16068.462107, +63311.872566,
  //  KAHAЛ   31
  -251.567411, +16019.739459, +63319.336494,
  //  KAHAЛ   32
  -252.121704, +15970.979048, +63327.107901,
  //  KAHAЛ   33
  -252.273430, +15922.256277, +63334.572866,
  //  KAHAЛ   34
  -252.625541, +15873.533434, +63342.038348,
  //  KAHAЛ   35
  -252.978682, +15824.981665, +63349.526313,
  //  KAHAЛ   36
  -253.719228, +15793.893554, +63401.660312,
  //  KAHAЛ   37
  -254.221443, +15797.178765, +63451.345930,
  //  KAHAЛ   38
  -254.624047, +15800.463976, +63501.031560,
  //  KAHAЛ   39
  -254.932969, +15803.673790, +63551.331122,
  //  KAHAЛ   40
  -255.239322, +15806.921301, +63601.323737,
  //  KAHAЛ   41    CП N 4
  -64.698971, +28819.233327, +30477.192684,
  //  KAHAЛ   42
  -64.678751, +28823.375853, +30427.115684,
  //  KAHAЛ   43
  -64.759612, +28827.345826, +30377.346808,
  //  KAHAЛ   44
  -64.542334, +28831.315795, +30327.887221,
  //  KAHAЛ   45
  -64.378023, +28836.148801, +30267.608311,
  //  KAHAЛ   46
  -64.233899, +28786.456951, +30263.562166,
  //  KAHAЛ   47
  -63.688803, +28737.110205, +30258.900333,
  //  KAHAЛ   48
  -63.446243, +28687.590887, +30254.856490,
  //  KAHAЛ   49
  -63.401824, +28637.899027, +30250.502772,
  //  KAHAЛ   50
  -63.159358, +28588.552249, +30246.151934,
  //  KAHAЛ   51
  -63.318058, +28539.378000, +30241.802814,
  //  KAHAЛ   52
  -63.275585, +28489.858665, +30237.451958,
  //  KAHAЛ   53
  -63.304243, +28483.989964, +30312.260997,
  //  KAHAЛ   54
  -63.122312, +28479.847448, +30362.029060,
  //  KAHAЛ   55
  -62.942326, +28476.050016, +30411.799418,
  //  KAHAЛ   56
  -62.861953, +28472.080040, +30461.568626,
  //  KAHAЛ   57    CП N 5
  +33.089456,   -936.814796,   -751.512929,
  //  KAHAЛ   58
  +32.783195,   -937.503436,   -801.621078,
  //  KAHAЛ   59
  +32.076540,   -938.192084,   -851.729231,
  //  KAHAЛ   60
  +31.869536,   -938.880731,   -901.528077,
  //  KAHAЛ   61
  +32.562097,   -939.569351,   -951.636238,
  //  KAHAЛ   62
  +32.454291,   -940.430543,  -1001.435059,
  //  KAHAЛ   63
  +32.142150,  -1039.990573,   -993.063751,
  //  KAHAЛ   64
  +32.535457,  -1089.856846,   -989.031865,
  //  KAHAЛ   65
  +33.528400,  -1139.550560,   -984.999441,
  //  KAHAЛ   66
  +34.720974,  -1189.416826,   -980.657087,
  //  KAHAЛ   67
  +35.013108,  -1239.283100,   -976.623462,
  //  KAHAЛ   68
  +36.404898,  -1289.149362,   -972.279948
};



//------------------------------------------------------------------------------
// МАТРИЦЫ ПЕРЕСЧЕТА ДЛЯ СИСТЕМ МПК И ОБСК                                     |
T MLPER[36] =
{   /*L=1*/
     0.7412164823,     0.4997900548,     -0.4481160871,
    -0.4277020011,     0.8661465818,      0.2585751286,
     0.5173674948,     0.0000000000,      0.8557633290,
    /*L=2*/
     0.4470064000,     0.5003652000,      0.7414984000,
    -0.2583307000,     0.8658144000,     -0.4285214000,
    -0.8564173000,     0.0000000000,      0.5162843000,
    /*L=3*/
    -0.7400624000,     0.5008185000,      0.4488747000,
     0.4282086000,     0.8655523000,     -0.2597241000,
    -0.5185992000,     0.0000000000,     -0.8550175000,
    /*L=4*/
    -0.4505823771,     0.5002434996,     -0.7394132556,
     0.2603128177,     0.8658847736,      0.4271777099,
     0.8539395519,     0.0000000000,     -0.5203722145
};


T  MLBPER[12] =
{   /*L=1*/
    -43.363440,    43.944755,    -17.942885,
    /*L=2*/
    -43.353827,    43.984882,    -17.867557,
    /*L=3;*/
    -43.288767,    43.983263,    -18.028573,
    /*L=4;*/
    -43.285470,    43.935721,    -18.151986
};

// параметры для выбора номера грани
real64 APER = 4.0739400;
real64 BPER = 0.2454630;







//------------------------------------------------------------------------------
//Пересчет из Стартовой СК в МПСК                                              |
//вх.данные:  [iX,iY,iZ] - координаты вектора положения в Стартовой СК         |
//            [iVX,iVY,iVZ] - координаты вектора скорости в Стартовой СК       |
//вых.данные: [oX,oY,oZ,oVX,oVY,oVZ] МПСК координаты [м] и их производные[м/с] |
bool stsk2mpsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ,
               size_t ichannel_number)
{
  return stskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, ichannel_number,
                          TRANSFORM, SHIFT, true);
}


//------------------------------------------------------------------------------
//Пересчет из МПСК в Стартовую СК                                              |
//вх.данные:  [iX,iY,iZ] - координаты вектора положения в МПСК                 |
//            [iVX,iVY,iVZ] - координаты вектора скорости в МПСК                |
//вых.данные: [oX,oY,oZ,oVX,oVY,oVZ] координаты [м] и их производные[м/с]      |
//                                   в Стартовой СК                            |
bool mpsk2stsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ,
               size_t ichannel_number)
{
  return stskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, ichannel_number,
                          TRANSFORM, SHIFT, false);
}




//------------------------------------------------------------------------------
//Пересчет из ОБСК в МПСК                                                      |
bool obsk2mpsk(const T &iR,  const T &iU,  const T &iV,
               const T &idR, const T &idU, const T &idV,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ,
               rint32 i_NK, rint32 i_startNK, rint32 nEdge)
{
  if ( RCore::isNan(iR) || RCore::isNan(iU) || RCore::isNan(iV) )
  {
    return false;
  }

  T R1  =  (T)1. - iU*iU - iV*iV;
#ifdef G_ASSERT_SHEME
  assert(R1>=(T)0.);
#else
  if (R1 < (T)0.) return false;
#endif
  R1 = RCore::_sqrt(R1);

  T XGL = iR*R1,
    YGL = iR*iV,
    ZGL = iR*iU;
  //матрица пересчета из МПК в ОБСК (из МПК в АСПК) в зависимости от грани МРЛС
  T ML[9],
  //вектор пересчета из МПК в ОБСК (из МПК в АСПК) в зависимости от грани МРЛС
    MLV[3];

  if ( (i_startNK==1 && i_NK>68) ||
       (i_startNK==33 &&  ((i_NK<33) || i_NK>(33+68-1))) ) return false;

  //Выбор матрицы пересчета
  //запись на ЭЛЬ-76 (для справки):   ML:=MLПEP[(L-1)*9:9];
  for (rint32 i=0; i<9; i++)
    ML[i] = MLPER[9*(nEdge-1)+i];

  //Выбор вектора пересчета
  //запись на ЭЛЬ-76 (для справки): MLV:=MLBПEP[(L-1)*3:3];
  for (rint32 i=0; i<3; i++)
    MLV[i] = MLBPER[3*(nEdge-1)+i];

  //ПEPECЧET BEKTOPA ПOЛOЖEHИЯ ИЗ OБCK B MПCK
  XGL -= MLV[0];
  YGL -= MLV[1];
  ZGL -= MLV[2];
  oX = ML[0]*XGL + ML[3]*YGL + ML[6]*ZGL;
  oY = ML[1]*XGL + ML[4]*YGL + ML[7]*ZGL;
  oZ = ML[2]*XGL + ML[5]*YGL + ML[8]*ZGL;

  //ПEPECЧET BEKTOPA CKOPOCTИ ИЗ OБCK B MПCK
  if ( (RCore::isNan(idR)==false) && (RCore::isNan(idU)==false) &&
       (RCore::isNan(idV)==false) )
  {
    XGL = idR*R1 - iR*(iU*idU + iV*idV)/R1;
    YGL = iR*idV + idR*iV;
    ZGL = iR*idU + idR*iU;
    oVX = ML[0]*XGL + ML[3]*YGL + ML[6]*ZGL;
    oVY = ML[1]*XGL + ML[4]*YGL + ML[7]*ZGL;
    oVZ = ML[2]*XGL + ML[5]*YGL + ML[8]*ZGL;
  }
  else
  {
    oVX = oVY = oVZ = NAN;
  }

  return true;
}



//------------------------------------------------------------------------------
//Пересчет из МПСК в ОБСК                                                      |
bool mpsk2obsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oR, T &oU, T &oV, T &odR, T &odU,
               T &odV, rint32 i_NK, rint32 i_startNK, rint32 &nEdge)
{
  if ( RCore::isNan(iX) || RCore::isNan(iY) || RCore::isNan(iZ) )
  {
    return false;
  }

  T XGLT = 0.f, YGLT = 0.f, ZGLT = 0.f,
    XGL  = 0.f, YGL  = 0.f, ZGL  = 0.f,
    RYA  = APER*iX + iZ,
    RYA1 = -BPER*iX + iZ;
  //матрица пересчета из МПК в ОБСК (из МПК в АСПК) в зависимости от грани МРЛС
  T ML[9],
  //вектор пересчета из МПК в ОБСК (из МПК в АСПК) в зависимости от грани МРЛС
    MLV[3];

  if ( (i_startNK==1 && i_NK>68) ||
       (i_startNK==33 && ((i_NK<33) || i_NK>(33+68-1))) ) return false;

  rint32 iedge;
  //Выбор номера грани МРЛС
  if (RYA<=0.f && RYA1>0.f) iedge = 3;
  else if (RYA<0.f && RYA1<=0.f) iedge = 4;
  else if (RYA>=0.f && RYA1<0.f) iedge = 1;
  else iedge = 2;
  if (nEdge<0) iedge = _MFASTABS(nEdge);
  else nEdge = iedge;

  //Выбор матрицы пересчета
  //запись на ЭЛЬ-76 (для справки):   ML:=MLПEP[(L-1)*9:9];
  for (rint32 i=0; i<9; i++)
    ML[i] = MLPER[9*(iedge-1) + i];

  //Выбор вектора пересчета
  //запись на ЭЛЬ-76 (для справки): MLV:=MLBПEP[(L-1)*3:3];
  for (rint32 i=0; i<3; i++)
    MLV[i] = MLBPER[3*(iedge-1) + i];

  XGL = ML[0]*iX + ML[1]*iY + ML[2]*iZ + MLV[0];
  YGL = ML[3]*iX + ML[4]*iY + ML[5]*iZ + MLV[1];
  ZGL = ML[6]*iX + ML[7]*iY + ML[8]*iZ + MLV[2];

  oR = RCore::_sqrt(XGL*XGL + YGL*YGL + ZGL*ZGL);
  if (RCore::isEqual(oR, (T)0.)) return false;

  //ПEPECЧET BEKTOPA ПOЛOЖEHИЯ ИЗ MПK B OБCK
  oV = YGL/oR;
  oU = ZGL/oR;

  //ПEPECЧET BEKTOPA CKOPOCTИ ИЗ OБCK B MПK
  if ( (RCore::isNan(iVX)==false) && (RCore::isNan(iVY)==false) &&
       (RCore::isNan(iVZ)==false) )
  {
    XGLT = ML[0]*iVX + ML[1]*iVY + ML[2]*iVZ;
    YGLT = ML[3]*iVX + ML[4]*iVY + ML[5]*iVZ;
    ZGLT = ML[6]*iVX + ML[7]*iVY + ML[8]*iVZ;
    odR  = (XGL*XGLT + YGL*YGLT + ZGL*ZGLT)/oR;
    odV  = (oR*YGLT - YGL*odR) / (oR*oR);
    odU  = (oR*ZGLT - ZGL*odR) / (oR*oR);
  }
  else
  {
    odR = odV = odU = NAN;
  }

  return true;
}





const ruint32 edge_cnt = 4;

//Азимуты нормалей к граням
T a[edge_cnt] =
{
  _MDEG2RAD(238.0 + 51.0/60.0 + 15.9/3600.0),
  _MDEG2RAD(328.0 + 54.0/60.0 + 10.4/3600.0),
  _MDEG2RAD(58.0  + 45.0/60.0 + 11.8/3600.0),
  _MDEG2RAD(148.0 + 38.0/60.0 + 50.9/3600.0)
};
//Углы между горизонтальной плоскостью и антеннами граней
T e[edge_cnt] =
{
  _MDEG2RAD(59.0 + 58.0/60.0 + 29.3/3600.0),
  _MDEG2RAD(59.0 + 59.0/60.0 +  4.4/3600.0),
  _MDEG2RAD(59.0 + 59.0/60.0 + 37.8/3600.0),
  _MDEG2RAD(59.0 + 59.0/60.0 +  0.3/3600.0)
};
//Поворот приемной ФАР4
T b[edge_cnt] =
{
  _MDEG2RAD(0.0 - 1.0/60.0 - 48.0/3600.0),
  _MDEG2RAD(0.0 + 0.0/60.0 + 43.0/3600.0),
  _MDEG2RAD(0.0 - 2.0/60.0 - 48.0/3600.0),
  _MDEG2RAD(0.0 - 6.0/60.0 -  2.0/3600.0)
};


const T ac = 59.0, // Полурасстояние между гранями
        bc = 18.04,// Сдвиг между ПРД и ПРМ
        hc = 16.12;// Полувысота центра грани


T	MRLSSHIFT[3*edge_cnt] =
{
   -ac*RCore::_sin(a[0]) - bc*RCore::_cos(a[0]),   -hc,
    ac*RCore::_cos(a[0]) - bc*RCore::_sin(a[0]),

   -ac*RCore::_sin(a[1]) - bc*RCore::_cos(a[1]),   -hc,
    ac*RCore::_cos(a[1]) - bc*RCore::_sin(a[1]),

   -ac*RCore::_sin(a[2]) - bc*RCore::_cos(a[2]),   -hc,
    ac*RCore::_cos(a[2]) - bc*RCore::_sin(a[2]),

   -ac*RCore::_sin(a[3]) - bc*RCore::_cos(a[3]),   -hc,
    ac*RCore::_cos(a[3]) - bc*RCore::_sin(a[3])
};

T	MRLSTRANSFORM[9*edge_cnt] =
{
  -RCore::_sin(e[0])*RCore::_sin(a[0]),
   RCore::_cos(e[0]),
   RCore::_sin(e[0])*RCore::_cos(a[0]),
   RCore::_cos(b[0])*RCore::_cos(e[0])*RCore::_sin(a[0]) - RCore::_sin(b[0])*RCore::_cos(a[0]),
   RCore::_cos(b[0])*RCore::_sin(e[0]),
  -RCore::_cos(b[0])*RCore::_cos(e[0])*RCore::_cos(a[0]) - RCore::_sin(b[0])*RCore::_sin(a[0]),
  -RCore::_sin(b[0])*RCore::_cos(e[0])*RCore::_sin(a[0]) - RCore::_cos(b[0])*RCore::_cos(a[0]),
  -RCore::_sin(b[0])*RCore::_sin(e[0]),
   RCore::_sin(b[0])*RCore::_cos(e[0])*RCore::_cos(a[0]) - RCore::_cos(b[0])*RCore::_sin(a[0]),

  -RCore::_sin(e[1])*RCore::_sin(a[1]),
   RCore::_cos(e[1]),
   RCore::_sin(e[1])*RCore::_cos(a[1]),
   RCore::_cos(b[1])*RCore::_cos(e[1])*RCore::_sin(a[1]) - RCore::_sin(b[1])*RCore::_cos(a[1]),
   RCore::_cos(b[1])*RCore::_sin(e[1]),
  -RCore::_cos(b[1])*RCore::_cos(e[1])*RCore::_cos(a[1]) - RCore::_sin(b[1])*RCore::_sin(a[1]),
  -RCore::_sin(b[1])*RCore::_cos(e[1])*RCore::_sin(a[1]) - RCore::_cos(b[1])*RCore::_cos(a[1]),
  -RCore::_sin(b[1])*RCore::_sin(e[1]),
   RCore::_sin(b[1])*RCore::_cos(e[1])*RCore::_cos(a[1]) - RCore::_cos(b[1])*RCore::_sin(a[1]),

  -RCore::_sin(e[2])*RCore::_sin(a[2]),
   RCore::_cos(e[2]),
   RCore::_sin(e[2])*RCore::_cos(a[2]),
   RCore::_cos(b[2])*RCore::_cos(e[2])*RCore::_sin(a[2]) - RCore::_sin(b[2])*RCore::_cos(a[2]),
   RCore::_cos(b[2])*RCore::_sin(e[2]),
  -RCore::_cos(b[2])*RCore::_cos(e[2])*RCore::_cos(a[2]) - RCore::_sin(b[2])*RCore::_sin(a[2]),
  -RCore::_sin(b[2])*RCore::_cos(e[2])*RCore::_sin(a[2]) - RCore::_cos(b[2])*RCore::_cos(a[2]),
  -RCore::_sin(b[2])*RCore::_sin(e[2]),
   RCore::_sin(b[2])*RCore::_cos(e[2])*RCore::_cos(a[2]) - RCore::_cos(b[2])*RCore::_sin(a[2]),

  -RCore::_sin(e[3])*RCore::_sin(a[3]),
   RCore::_cos(e[3]),
   RCore::_sin(e[3])*RCore::_cos(a[3]),
   RCore::_cos(b[3])*RCore::_cos(e[3])*RCore::_sin(a[3]) - RCore::_sin(b[3])*RCore::_cos(a[3]),
   RCore::_cos(b[3])*RCore::_sin(e[3]),
  -RCore::_cos(b[3])*RCore::_cos(e[3])*RCore::_cos(a[3]) - RCore::_sin(b[3])*RCore::_sin(a[3]),
  -RCore::_sin(b[3])*RCore::_cos(e[3])*RCore::_sin(a[3]) - RCore::_cos(b[3])*RCore::_cos(a[3]),
  -RCore::_sin(b[3])*RCore::_sin(e[3]),
   RCore::_sin(b[3])*RCore::_cos(e[3])*RCore::_cos(a[3]) - RCore::_cos(b[3])*RCore::_sin(a[3])
};

//------------------------------------------------------------------------------
//Пересчет из АПСК в МПСК                                                      |
bool apsk2mpsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ, ruint32 nEdge)
{
  return apskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, nEdge,
                          MRLSTRANSFORM, MRLSSHIFT, true, edge_cnt);
}


//------------------------------------------------------------------------------
//Пересчет из МПСК в АПСК                                                      |
bool mpsk2apsk(const T &iX,  const T &iY,  const T &iZ,
               const T &iVX, const T &iVY, const T &iVZ,
               T &oX, T &oY, T &oZ, T &oVX, T &oVY, T &oVZ, ruint32 nEdge)
{
  return apskmpskInternal(iX, iY, iZ, iVX, iVY, iVZ,
                          oX, oY, oZ, oVX, oVY, oVZ, nEdge,
                          MRLSTRANSFORM, MRLSSHIFT, false, edge_cnt);
}



}


















} //namespace RGeoMath

} //namespace RMath
